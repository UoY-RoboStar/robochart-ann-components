--ASSUMPTIONS: Input is NORMALISED, has 1 max, and there is an ORDERING TO THE INPUTS.
--Assume normalisation is [0,1], it does work for -0.5, 0.5, but simpler for [0,1].

include "NETWORKS/mnist_10x10.csp"
include "INACTIVATION_LOGIC/inactivation_logic.csp"

insize = 784
outsize = 10
layerstructure = <10>
layerNo = #layerstructure 

--Important constant: 

--INPUT ORDER HELPS, NOT NECESSARY TECHNICALLY.
INPUT_ORDER = <i | i <- <1..insize>>


--CHANNELS AND DATA TYPES: 

--Context channel: 
core_real = { -1..1}

--Decisions: 
datatype decisions = Zer | One | Two | Three | Four | Five | Six | Seven | Eight | Nine
datatype decisionsacasxu = COC | WL | WR | SL | SR

channel context_input:{1..insize}.core_real

channel context_output:Set(decisions)

datatype InternalPhases = Zero | InActive | Active | Uncertain

datatype Phases = active | inactive | uncertain
datatype IsMax = Max | Not

channel NodePhase:{0, 1}.{1..insize}.Phases

channel end 

--Assume INPUT IS ALWAYS POSITIVE, so we don't need
EdgeLogic(input_phase, weight) = 
		if(input_phase == inactive)
			then 
				Zero
		else if(input_phase == active) 
			then	
				if(weight == Active)
					then 
						Active
					else
						InActive
		else if(input_phase == uncertain)
				then
					Uncertain
				else
					Zero

--Sequence of the results of the last hidden layer, for transparency
Last_Hidden_Layer_Results = <if (extract_biases(layerNo,node) == Active)
						then
							if(BoundedActivation'(layerNo, node, <active | i <- <1..5>>) == True)
								then
									active
								else
									uncertain
						else 
							if(BoundedInActivation'(layerNo, node, <active | i <- <1..5>>) == True)
								then
									inactive
								else
									uncertain
						| 
						node <- <1..layerSize(layerNo)>
						>
						
OutputLayer = let
	C(0, input_values) = 
	
		let
			network_results = <if (extract_biases(layerNo,node) == Active)
						then
							if(BoundedActivation'(layerNo, node, input_values) == True)
								then
									OutputLayerEdge(active)
								else
									OutputLayerEdge(uncertain)
						else 
							if(BoundedInActivation'(layerNo, node, input_values) == True)
								then
									OutputLayerEdge(inactive)
								else
									OutputLayerEdge(uncertain)
						| 
						node <- <1..layerSize(layerNo)>
						>
		within

			context_output!(if card({ context_translation(i) | i <- {1..outsize}, couldNodeMax((layerNo+1), i, network_results) == True}) > 0
						then {context_translation(i) | i <- {1..outsize}, couldNodeMax((layerNo+1), i, network_results) == True}
							
					else 
						decisions) -> SKIP ; 
						
			(; i : <1..outsize> @ NodePhase.1.i!(if BoundedActivation'(layerNo+1, i, input_values) == True then active else 
							(if BoundedInActivation'(layerNo+1, i, input_values) == True then inactive else uncertain) ) -> SKIP)
			
			
	C(index, input_values) = 
		NodePhase.0.index?input_phase -> 
			C((index-1), <input_phase>^input_values)
	within 
		C(insize, <>)

--inputlayer only with N active.	
InputLayer(n) = 
	(; i : <0..insize-1> @ (member(i,n)) & ( NodePhase.0.(insize-i).active -> SKIP ) [] (not member(i,n)) & ( NodePhase.0.(insize-i).inactive -> SKIP ))
	
--FOR MNIST, the handwriting recognition.
context_translation(1) = Zer
context_translation(2) = One
context_translation(3) = Two
context_translation(4) = Three
context_translation(5) = Four
context_translation(6) = Five
context_translation(7) = Six
context_translation(8) = Seven
context_translation(9) = Eight
context_translation(10) = Nine

--For acas xu: 
context_translation_acasxu(1) = COC
context_translation_acasxu(2) = WL
context_translation_acasxu(3) = WR
context_translation_acasxu(4) = SL
context_translation_acasxu(5) = SR


		
ActiveIndicies(results) = {i | i <- {1..#results}, extract_sequence(i, results) == Active}


--results is the INACTIVE nodes, not a member, 
--sequence again, where, extract either, when its active or inactive, yes, why pos? Yes, those that are active or uncertain, not inactive. 
--Not member, or member, no, member. All those, where the weight could be active, not the highest for all of those. 
--Only for those i that are a member of, the positive indicies. 
--MAKE A COULD NODE MAX, UNDER WORST SITUATIONS, assume all is ACTIVE.


couldNodeMax(l, n, results) = 
	if ( not member(True, { n == head(layerwise_weight_order(l, i)) | i <- {1..layerSize(l-1)}, member(i, extractPosWeights(results, True))})
		and 
		head(layerwise_bias_order(l)) != n ) 
		then
			False
		else 
			True

OutputLayerEdge(result) = 
if(result == active or result == uncertain)
	then
		Active
	else
		InActive

--Better if the output interpreter inside the main function, needs to be because of the recursion.
--It needs to recieve the results, from the INPUT LAYER. We don't have edges, 
ANN(n) = ( (InputLayer(n) [| {| NodePhase.0 |} |] OutputLayer))

assert ANN({0..insize-1}) :[deadlock-free]
	
--HELPER FUNCTIONS: 
-- Extraction Functions, because random access not implemented in CSPM, implemented as lists not a type of function --

extract_sequence(1, sequence) = head(sequence)
extract_sequence(index, sequence) = extract_sequence((index-1), tail(sequence))

layerSize(0) = insize
layerSize(layer) = extract_sequence(layer, layerstructure)

extract_weights(layer, node, index) = 
	extract_sequence(index, 
		(extract_sequence(node, 
			(extract_sequence(layer, weights)))))
--Extract weights of node
extract_biases(layer, node) = 
	(extract_sequence(node, 
		(extract_sequence(layer, biases))))
										
