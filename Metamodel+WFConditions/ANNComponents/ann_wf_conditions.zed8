─ section spec parents standard_toolkit
└

─ [ Parameters, String, Expression, Variable ] └

─
  Boolean ::= False | True
└

─
  ActivationFunction ::= RELU | LINEAR | NOTSPECIFIED
└

─
  VariableModifier ::= VAR | CONST
└

─
  SeqExp ::= null_seq | vector ⟪ seq ℤ ⟫ | matrix ⟪ seq seq Expression ⟫  | tensor ⟪ seq seq seq Expression ⟫
└

─
  StringExp ::= null_string | value ⟪ Expression ⟫
└

┌ Event
  type : Expression
  broadcast : Boolean
└

┌ ANNParameters
  insize : ℤ
  outsize : ℤ
  layerstructure : SeqExp
  weights : SeqExp
  biases : SeqExp
  filename : StringExp
  activationfunction : ActivationFunction
└

┌ VariableList
  modifier : VariableModifier
  vars : ℙ Variable
 |
   # vars > 0
└

┌ Interface
  variableList : ℙ VariableList
  
└


┌ ANNOperation
  parameters : ℙ Parameters
  annparameters : ANNParameters
  rInterface : Interface
└

┌ ANNController
  events : ℙ Event
  annparameters : ANNParameters
└

─
  ConnectionNode == ANNController
└

┌ Connection
  from : ConnectionNode
  to :  ConnectionNode
  efrom : Event
  eto : Event
  async : Boolean
  bidirec : Boolean
└

┌ RCModule
  connections : ℙ Connection
  nodes : ℙ ConnectionNode
└

╷
  WF1 : ℙ ANNParameters
|
  ∀ annparams : ANNParameters ⦁ 
    annparams.insize > 0 ∧
    annparams.outsize > 0 ∧
    (annparams.weights ≠ null_seq ∧ annparams.biases ≠ null_seq ∧ annparams.layerstructure ≠ null_seq  ⇒ 
     (tensor∼) annparams.weights ≠ ∅ ∧ (matrix∼) annparams.biases ≠ ∅ ∧ (vector∼) annparams.layerstructure ≠ ∅ ∧
      # (tensor∼) annparams.weights = # (vector∼) annparams.layerstructure ∧
      # (matrix∼) annparams.biases = # (vector∼) annparams.layerstructure)
└

╷
  WF2 : ℙ ANNParameters
|
  ∀ annparams : ANNParameters ⦁ 
    annparams.filename = null_string ⇒ 
    	annparams.weights ≠ null_seq ∧ annparams.biases ≠ null_seq ∧ annparams.layerstructure ≠ null_seq
└

╷
  WF3 : ℙ ANNParameters
|
  ∀ annparams : ANNParameters ⦁ 
    annparams.weights = null_seq ∧ annparams.biases = null_seq ∧ annparams.layerstructure = null_seq ∧ annparams.filename ≠ null_string
    ∨
    annparams.weights ≠ null_seq ∧ annparams.biases ≠ null_seq ∧ annparams.layerstructure ≠ null_seq
└

╷
  WF4 : ℙ ANNParameters
|
  ∀ annparams : ANNParameters ⦁ 
    (annparams.activationfunction = NOTSPECIFIED)  ⇔ (annparams.filename ≠ null_string)
└

╷
  WF5 : ℙ ANNParameters
|
  ∀ annparams : ANNParameters ⦁ 
    (annparams.filename = null_string) ⇒ 
      ∀ i : dom ((vector∼) annparams.layerstructure) ⦁
        # (tensor∼) annparams.weights i = (vector∼) annparams.layerstructure i ∧
         #(matrix∼) annparams.biases i = (vector∼) annparams.layerstructure i
└

╷
  WF6 : ℙ ANNParameters
|
  ∀ annparams : ANNParameters ⦁ 
    (annparams.filename = null_string) ⇒ 
      ∀ i : dom ((vector∼) annparams.layerstructure) ⦁
      	∀ j : dom ((tensor∼) annparams.weights i) ⦁ 
      		( i > 1) ⇒ 
      			# (tensor∼) annparams.weights i j = (vector∼) annparams.layerstructure i 
      		∧
      		( i = 1) ⇒ 
      			# (tensor∼) annparams.weights i j = annparams.insize
└

╷
  WF7 : ℙ ANNController
|
  ∀ anncontroller : ANNController ⦁ 
    # anncontroller.events = 2 ∨ 
   	# anncontroller.events = anncontroller.annparameters.insize +
   											  anncontroller.annparameters.outsize
└

╷
  WF8 : ℙ RCModule
|
  ∀ module : RCModule ⦁
     ∀ anncontroller : ANNController | anncontroller ∈ module.nodes ⦁
     	# { conns : module.connections |  conns.to = anncontroller } = anncontroller.annparameters.insize ∧
     	# { conns : module.connections |  conns.from = anncontroller } = anncontroller.annparameters.outsize ∧
       ∀ from_conn, to_conn : module.connections | from_conn.from = anncontroller ∧ to_conn.to = anncontroller  ⦁	
         ∃ ann_input, ann_output : anncontroller.events ⦁
			from_conn.efrom.type = ann_output.type ∧
			to_conn.eto.type = ann_input.type
└

╷
  WF9 : ℙ ANNOperation
|
  ∀ annoperation : ANNOperation ⦁
    (# annoperation.parameters = 1 ∨ # annoperation.parameters = annoperation.annparameters.insize)
    ∧
     ( # ⋃ { varList : VariableList | varList ∈ annoperation.rInterface.variableList ∧ varList.modifier = VAR  ⦁ varList.vars} = 1 ∨
     	# ⋃ { varList : VariableList | varList ∈ annoperation.rInterface.variableList ∧ varList.modifier = VAR  ⦁ varList.vars} = annoperation.annparameters.outsize)
└
