
--
-- RoboChart generator version 3.0.0.202306261132
-- Automatically generated on 22-08-2023 01:53:02
--
-- Iterated compression status: true
-- Assertions compression status: false
--

module SpeedPID_S
exports
	transparent diamond
	transparent sbisim
	transparent dbisim
	transparent chase

	-- Transition identifiers
	-- declaring identifiers of transitions
	datatype NIDS = 
	              NID_i0|
	              NID_Read|
	              NID_UpdateIntegral|
	              NID_UpdateOutput
	
	channel internal__ : NIDS
	
	-- Flow channels		
	channel interrupt
	channel exited
	channel exit
	channel terminate
	
	-- Variable channels
	channel get_currNewError, set_currNewError, setL_currNewError, setR_currNewError: core_real
	channel get_currSpeedOutput, set_currSpeedOutput, setL_currSpeedOutput, setR_currSpeedOutput: core_real
	channel get_speedIntegral, set_speedIntegral, setL_speedIntegral, setR_speedIntegral: core_real
	
	-- Shared variable channels
	
	-- Local variable channels for defined operations that are required by the state machine
	
	-- Declaring state machine events
	channel snewError__: NIDS.InOut.core_real
	channel snewError: InOut.core_real
	channel speedOutputE__: NIDS.InOut.core_real
	channel speedOutputE: InOut.core_real
	
	-- Declaring call and ret events for undefined operations
	
	enterSS = {|
	i0::enter,
	Read::enter,
	UpdateIntegral::enter,
	UpdateOutput::enter
	|}
	
	enteredSS = 	{|
	Read::entered,
	UpdateIntegral::entered,
	UpdateOutput::entered
	|}
	
	internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
	
	shared_variable_events = {|
	|}
	
	-- channel set with all visible events
	sem__events = {|
		terminate
	,	snewError,
		speedOutputE
		|}
	
	channel clockReset, clockResetL, clockResetR 
	
	localClockResets = {||}
	
	
	channel get_CLID_UpdateIntegral : core_clock_type 
	channel get_CLID_Read : core_clock_type 
	channel get_CLID_UpdateOutput : core_clock_type 
	--channel increment__
	
	CLID_UpdateIntegral_clock_type(id__,
			          const_SpeedPID_S_P,
			          const_SpeedPID_S_I,
			          const_SpeedPID_S_maxIntegral) = 
		let
			max = (clock_type_max(Union({
	}))+1)
		ctype = {0..max}
	within
		if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
	
	CLID_Read_clock_type(id__,
			          const_SpeedPID_S_P,
			          const_SpeedPID_S_I,
			          const_SpeedPID_S_maxIntegral) = 
		let
			max = (clock_type_max(Union({
	}))+1)
		ctype = {0..max}
	within
		if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
	
	CLID_UpdateOutput_clock_type(id__,
			          const_SpeedPID_S_P,
			          const_SpeedPID_S_I,
			          const_SpeedPID_S_maxIntegral) = 
		let
			max = (clock_type_max(Union({
	}))+1)
		ctype = {0..max}
	within
		if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
	
	

		-- Nodes --
		-- declaring all nodes
		
		----------------------------------------------------------------------
		-- Initial: i0
		module i0
		exports
		
			channel enter, interrupt
			
			Timed(OneStep) {
				D__(id__,
						    const_SpeedPID_S_P,
						    const_SpeedPID_S_I,
						    const_SpeedPID_S_maxIntegral) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= share__choice(interrupt -> SKIP) ; Inactive
					within
						Inactive [| {terminate} |> SKIP)
				
				VS_O__(id__,
						    const_SpeedPID_S_P,
						    const_SpeedPID_S_I,
						    const_SpeedPID_S_maxIntegral) = D__(id__,
						    const_SpeedPID_S_P,
						    const_SpeedPID_S_I,
						    const_SpeedPID_S_maxIntegral)
			}
		
		endmodule
		----------------------------------------------------------------------
		
		
		----------------------------------------------------------------------
		-- State: Read
		module Read
		
		enterSS = {}
		
		enteredSS = {}
		
		exports
		
			--  Declarations
			
			channel enter, entered, interrupt
			channel enteredL, enteredR
			
							
			
			--channel increment__
			
			
			--	Nodes
			-- declaring all nodes
			
			
			Timed(OneStep) {
				--	Rule: behaviours(Node)
				--  Note that FDR has problems with efficiently compiling the process below
				-- 	if using a different recursion pattern.
				D__(id__,
						    const_SpeedPID_S_P,
						    const_SpeedPID_S_I,
						    const_SpeedPID_S_maxIntegral) = 
				dbisim(let
					-- IMPLEMENTATION NOTE: 
					-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
					-- however FDR struggles with that form in certain cases. So we use the exception operator
					-- instead to 'terminate'.
					
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= SKIP ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__,
						    const_SpeedPID_S_P,
						    const_SpeedPID_S_I,
						    const_SpeedPID_S_maxIntegral) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= SKIP ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
				
				
				-- Clocks
				
				StateClocks(id__,
						          const_SpeedPID_S_P,
						          const_SpeedPID_S_I,
						          const_SpeedPID_S_maxIntegral) = terminate -> SKIP
				
				stateClockSync = {||}
			}
		
		endmodule
		----------------------------------------------------------------------
		
		
		----------------------------------------------------------------------
		-- State: UpdateIntegral
		module UpdateIntegral
		
		enterSS = {}
		
		enteredSS = {}
		
		exports
		
			--  Declarations
			
			channel enter, entered, interrupt
			channel enteredL, enteredR
			
							
			
			--channel increment__
			
			
			--	Nodes
			-- declaring all nodes
			
			
			Timed(OneStep) {
				--	Rule: behaviours(Node)
				--  Note that FDR has problems with efficiently compiling the process below
				-- 	if using a different recursion pattern.
				D__(id__,
						    const_SpeedPID_S_P,
						    const_SpeedPID_S_I,
						    const_SpeedPID_S_maxIntegral) = 
				dbisim(let
					-- IMPLEMENTATION NOTE: 
					-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
					-- however FDR struggles with that form in certain cases. So we use the exception operator
					-- instead to 'terminate'.
					
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= share__choice(share__choice(get_speedIntegral?speedIntegral -> share__choice(get_currNewError?currNewError -> true & (share__choice(set_speedIntegral!Plus(speedIntegral, currNewError, core_real) -> SKIP)))));share__choice(share__choice(get_speedIntegral?speedIntegral -> true & (share__choice(set_speedIntegral!(if (speedIntegral>const_SpeedPID_S_maxIntegral) then const_SpeedPID_S_maxIntegral else (if (speedIntegral<Neg(const_SpeedPID_S_maxIntegral, core_real)) then Neg(const_SpeedPID_S_maxIntegral, core_real) else speedIntegral)) -> SKIP)))) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__,
						    const_SpeedPID_S_P,
						    const_SpeedPID_S_I,
						    const_SpeedPID_S_maxIntegral) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= share__choice(share__choice(get_speedIntegral?speedIntegral -> share__choice(get_currNewError?currNewError -> true & (share__choice(set_speedIntegral!Plus(speedIntegral, currNewError, core_real) -> SKIP)))));share__choice(share__choice(get_speedIntegral?speedIntegral -> true & (share__choice(set_speedIntegral!(if (speedIntegral>const_SpeedPID_S_maxIntegral) then const_SpeedPID_S_maxIntegral else (if (speedIntegral<Neg(const_SpeedPID_S_maxIntegral, core_real)) then Neg(const_SpeedPID_S_maxIntegral, core_real) else speedIntegral)) -> SKIP)))) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
				
				
				-- Clocks
				
				StateClocks(id__,
						          const_SpeedPID_S_P,
						          const_SpeedPID_S_I,
						          const_SpeedPID_S_maxIntegral) = terminate -> SKIP
				
				stateClockSync = {||}
			}
		
		endmodule
		----------------------------------------------------------------------
		
		
		----------------------------------------------------------------------
		-- State: UpdateOutput
		module UpdateOutput
		
		enterSS = {}
		
		enteredSS = {}
		
		exports
		
			--  Declarations
			
			channel enter, entered, interrupt
			channel enteredL, enteredR
			
							
			
			--channel increment__
			
			
			--	Nodes
			-- declaring all nodes
			
			
			Timed(OneStep) {
				--	Rule: behaviours(Node)
				--  Note that FDR has problems with efficiently compiling the process below
				-- 	if using a different recursion pattern.
				D__(id__,
						    const_SpeedPID_S_P,
						    const_SpeedPID_S_I,
						    const_SpeedPID_S_maxIntegral) = 
				dbisim(let
					-- IMPLEMENTATION NOTE: 
					-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
					-- however FDR struggles with that form in certain cases. So we use the exception operator
					-- instead to 'terminate'.
					
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= share__choice(share__choice(get_speedIntegral?speedIntegral -> share__choice(get_currNewError?currNewError -> true & (share__choice(set_currSpeedOutput!Plus(Mult(currNewError, const_SpeedPID_S_P, core_real), Mult(speedIntegral, const_SpeedPID_S_I, core_real), core_real) -> SKIP))))) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__,
						    const_SpeedPID_S_P,
						    const_SpeedPID_S_I,
						    const_SpeedPID_S_maxIntegral) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= share__choice(share__choice(get_speedIntegral?speedIntegral -> share__choice(get_currNewError?currNewError -> true & (share__choice(set_currSpeedOutput!Plus(Mult(currNewError, const_SpeedPID_S_P, core_real), Mult(speedIntegral, const_SpeedPID_S_I, core_real), core_real) -> SKIP))))) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
				
				
				-- Clocks
				
				StateClocks(id__,
						          const_SpeedPID_S_P,
						          const_SpeedPID_S_I,
						          const_SpeedPID_S_maxIntegral) = terminate -> SKIP
				
				stateClockSync = {||}
			}
		
		endmodule
		----------------------------------------------------------------------
		
		-- END of Nodes --
		
		Timed(OneStep) {
		-- Operation calls --
		-- Only the undefined operations are declared here.
		-- If the state machine is in isolation, all required operations will be undefined.
		-- If it is in the context of a controller, the required operations not provided by the
		-- controller will be declared here, and the defined operations will be defined in the
		-- context of the Controller module, and therefore within scope of the state machine module.
		
		-- END of Operation calls --
	
		-- STM processes
		STM(id__,
				    const_SpeedPID_S_P,
				    const_SpeedPID_S_I,
				    const_SpeedPID_S_maxIntegral) = prioritise(-- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
		( 
			(
				(
					(IteratedStateful(id__,
							    const_SpeedPID_S_P,
							    const_SpeedPID_S_I,
							    const_SpeedPID_S_maxIntegral) \ {terminate} ; share__choice(terminate -> SKIP))
				 	[[ share__ <- x__ | x__ <- {||} ]]
				)
			[| {share__} |]
			SKIP
			)
			[| union(sharedVarSync,{terminate}) |]
			dbisim(sharedVarMemory(id__,
					    const_SpeedPID_S_P,
					    const_SpeedPID_S_I,
					    const_SpeedPID_S_maxIntegral))
		)\sharedVarHide
		,<{terminate},{tock}>)
		
		STM_VS_O(id__,
				    const_SpeedPID_S_P,
				    const_SpeedPID_S_I,
				    const_SpeedPID_S_maxIntegral) = prioritise(-- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
		( 
			(
				(
					(IteratedStateful_VS_O(id__,
							    const_SpeedPID_S_P,
							    const_SpeedPID_S_I,
							    const_SpeedPID_S_maxIntegral) \ {terminate} ; share__choice(terminate -> SKIP))
				 	[[ share__ <- x__ | x__ <- {||} ]]
				)
			[| {share__} |]
			SKIP
			)
			[| union(sharedVarSync,{terminate}) |]
			dbisim(sharedVarMemory(id__,
					    const_SpeedPID_S_P,
					    const_SpeedPID_S_I,
					    const_SpeedPID_S_maxIntegral))
		)\sharedVarHide
		,<{terminate},{tock}>)
		
		-- Transitions
		Transitions(id__,
				    const_SpeedPID_S_P,
				    const_SpeedPID_S_I,
				    const_SpeedPID_S_maxIntegral) = ((let
			Trans = TimeOut_1(
				 (share__ -> SKIP
				 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; Read::enter -> SKIP))))
				 [] dbisim((true)&(internal__!NID_UpdateIntegral -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; UpdateOutput::enter -> SKIP)))
				 [] dbisim((true)&(internal__!NID_UpdateOutput -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(get_currSpeedOutput?currSpeedOutput -> true&(share__choice(speedOutputE.out!currSpeedOutput -> SKIP))) ; Read::enter -> SKIP)))
				 [] dbisim((true)&(snewError__!NID_Read.in?currNewError:{currNewError|currNewError <- core_real, true} -> share__choice(set_currNewError!currNewError -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; UpdateIntegral::enter -> SKIP)))
				 []
				 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
				 []
				 terminate -> SKIP
				 )
			,SKIP);Trans
		within
			Trans [|{terminate}|> SKIP
		)
		)
		
		-- Stateful
		-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
		
		-- Named process definitions
		MachineBody(id__,
				    const_SpeedPID_S_P,
				    const_SpeedPID_S_I,
				    const_SpeedPID_S_maxIntegral) = 
			dbisim((
			let
				finalNodesEntered = {||}
			within
				(dbisim((dbisim((let
					-- IMPLEMENTATION NOTE:
					-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
					-- modules for defining the semantics of each node.
					enterSS = {|
					i0::enter,
					Read::enter,
					UpdateIntegral::enter,
					UpdateOutput::enter
					|}
					hideSet = union(enterSS,{|exit,exited,internal__|})
				within 
					((let
						-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
						-- because CSPM modules are used for the semantics of Node.
						flowevts = union(enterSS,{|exit,exited,interrupt|})
						transSync = {|internal__.NID_i0,internal__.NID_UpdateIntegral,internal__.NID_UpdateOutput,snewError__.NID_Read.in|}
					within
						((
						 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
						   i0::D__(id__,
						   		    const_SpeedPID_S_P,
						   		    const_SpeedPID_S_I,
						   		    const_SpeedPID_S_maxIntegral)
						   [| { share__, terminate } |] (
						   Read::D__(id__,
						   		    const_SpeedPID_S_P,
						   		    const_SpeedPID_S_I,
						   		    const_SpeedPID_S_maxIntegral)
						   [| { share__, terminate } |] (
						   UpdateIntegral::D__(id__,
						   		    const_SpeedPID_S_P,
						   		    const_SpeedPID_S_I,
						   		    const_SpeedPID_S_maxIntegral)
						   [| { share__, terminate } |] (
						   UpdateOutput::D__(id__,
						   		    const_SpeedPID_S_P,
						   		    const_SpeedPID_S_I,
						   		    const_SpeedPID_S_maxIntegral)
						   )
						   )
						   )
						 )
						 [[Read::interrupt <- x__ | x__ <- {|interrupt,snewError__.NID_Read.in|}]]
						 [[UpdateIntegral::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_UpdateIntegral|}]]
						 [[UpdateOutput::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_UpdateOutput|}]]
						 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
						 )
						  [[ share__ <- x__ | x__ <- {| share__,setR_currNewError |} ]] 
						 )
						 [| union(union(union(flowevts,transSync),{terminate}),{|share__
						 			,setR_currNewError
						 			|}) |]
						 ((i0::enter -> Transitions(id__,
						 		    const_SpeedPID_S_P,
						 		    const_SpeedPID_S_I,
						 		    const_SpeedPID_S_maxIntegral))
						  [[ share__ <- x__ | x__ <- {| share__ |} ]]
						  [[set_currNewError <- setR_currNewError]]
						 )
						)
						 [[setR_currNewError <- set_currNewError]]
						)
					)
					 \ hideSet)
					[[
						snewError__.x____ <- snewError,
						speedOutputE__.x____ <- speedOutputE
						| x____ <- NIDS
					]]
				)
				)
				 [| union(stateClockSync,{terminate}) |]
				 StateClocks(id__,
				 		          const_SpeedPID_S_P,
				 		          const_SpeedPID_S_I,
				 		          const_SpeedPID_S_maxIntegral)
				)\diff(stateClockSync,enteredSS))
				 [| {| interrupt |} |] SKIP)
			)
			)
		
		Behaviour(id__,
				    const_SpeedPID_S_P,
				    const_SpeedPID_S_I,
				    const_SpeedPID_S_maxIntegral) = 
			dbisim((let
				stateClockSync = {|get_CLID_UpdateIntegral,UpdateIntegral::entered,get_CLID_Read,Read::entered,get_CLID_UpdateOutput,UpdateOutput::entered|}
			 within
				(MachineBody(id__,
						    const_SpeedPID_S_P,
						    const_SpeedPID_S_I,
						    const_SpeedPID_S_maxIntegral) [| union(stateClockSync,{terminate}) |] StateClocks(id__,
						          const_SpeedPID_S_P,
						          const_SpeedPID_S_I,
						          const_SpeedPID_S_maxIntegral)) \ union(stateClockSync,enteredSS)
			)
			)
		
		IteratedBehaviour(id__,
				    const_SpeedPID_S_P,
				    const_SpeedPID_S_I,
				    const_SpeedPID_S_maxIntegral) = 
			dbisim((let
				stateClockSync = {|get_CLID_UpdateIntegral,UpdateIntegral::entered,get_CLID_Read,Read::entered,get_CLID_UpdateOutput,UpdateOutput::entered|}
			 within
				(dbisim(
					sbisim(
						dbisim(
							sbisim(
								dbisim(
									sbisim(
										MachineBody(id__,
												    const_SpeedPID_S_P,
												    const_SpeedPID_S_I,
												    const_SpeedPID_S_maxIntegral)
										[| {|get_CLID_UpdateOutput,UpdateOutput::entered,terminate|} |]
										dbisim(Clock_CLID_UpdateOutput(id__,0,
												          const_SpeedPID_S_P,
												          const_SpeedPID_S_I,
												          const_SpeedPID_S_maxIntegral))
									)\{|get_CLID_UpdateOutput|}
								)
								[| {|get_CLID_Read,Read::entered,terminate|} |]
								dbisim(Clock_CLID_Read(id__,0,
										          const_SpeedPID_S_P,
										          const_SpeedPID_S_I,
										          const_SpeedPID_S_maxIntegral))
							)\{|get_CLID_Read|}
						)
						[| {|get_CLID_UpdateIntegral,UpdateIntegral::entered,terminate|} |]
						dbisim(Clock_CLID_UpdateIntegral(id__,0,
								          const_SpeedPID_S_P,
								          const_SpeedPID_S_I,
								          const_SpeedPID_S_maxIntegral))
					)\{|get_CLID_UpdateIntegral|}
				)
				) \ union(stateClockSync,enteredSS)
			)
			)
		
		Stateful(id__,
				    const_SpeedPID_S_P,
				    const_SpeedPID_S_I,
				    const_SpeedPID_S_maxIntegral) = 
			((let
				getsetLocalChannels = {|get_currNewError,set_currNewError,
				get_currSpeedOutput,set_currSpeedOutput,
				get_speedIntegral,set_speedIntegral|}
				clockSync = {||}
			within
				(Behaviour(id__,
						    const_SpeedPID_S_P,
						    const_SpeedPID_S_I,
						    const_SpeedPID_S_maxIntegral) 
				 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
				 (varMemory(id__,
				 		    const_SpeedPID_S_P,
				 		    const_SpeedPID_S_I,
				 		    const_SpeedPID_S_maxIntegral) [| {terminate} |] Clocks(id__,
				 		          const_SpeedPID_S_P,
				 		          const_SpeedPID_S_I,
				 		          const_SpeedPID_S_maxIntegral))
			 	)\union(getsetLocalChannels,clockSync)
			)
			)
		
		IteratedStateful(id__,
				    const_SpeedPID_S_P,
				    const_SpeedPID_S_I,
				    const_SpeedPID_S_maxIntegral) =
			(dbisim(
				sbisim(
					dbisim(
						sbisim(
							dbisim(
								sbisim(
									IteratedBehaviour(id__,
											    const_SpeedPID_S_P,
											    const_SpeedPID_S_I,
											    const_SpeedPID_S_maxIntegral)
									[| {|get_speedIntegral,set_speedIntegral,terminate|} |]
									Memory_speedIntegral(0)
								)\{|get_speedIntegral,set_speedIntegral|}
							)
							[| {|get_currSpeedOutput,set_currSpeedOutput,terminate|} |]
							Memory_currSpeedOutput(0)
						)\{|get_currSpeedOutput,set_currSpeedOutput|}
					)
					[| {|get_currNewError,set_currNewError,terminate|} |]
					Memory_currNewError(0)
				)\{|get_currNewError,set_currNewError|}
			)
			)
		
		-- Visible counterparts
		MachineBody_VS_O(id__,
				    const_SpeedPID_S_P,
				    const_SpeedPID_S_I,
				    const_SpeedPID_S_maxIntegral) = 
			dbisim((
			let
				finalNodesEntered = {||}
			within
				(dbisim((dbisim((let
					-- IMPLEMENTATION NOTE:
					-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
					-- modules for defining the semantics of each node.
					enterSS = {|
					i0::enter,
					Read::enter,
					UpdateIntegral::enter,
					UpdateOutput::enter
					|}
					hideSet = union(enterSS,{|exit,exited,internal__|})
				within 
					((let
						-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
						-- because CSPM modules are used for the semantics of Node.
						flowevts = union(enterSS,{|exit,exited,interrupt|})
						transSync = {|internal__.NID_i0,internal__.NID_UpdateIntegral,internal__.NID_UpdateOutput,snewError__.NID_Read.in|}
					within
						((
						 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
						   i0::VS_O__(id__,
						   		    const_SpeedPID_S_P,
						   		    const_SpeedPID_S_I,
						   		    const_SpeedPID_S_maxIntegral)
						   [| { share__, terminate } |] (
						   Read::VS_O__(id__,
						   		    const_SpeedPID_S_P,
						   		    const_SpeedPID_S_I,
						   		    const_SpeedPID_S_maxIntegral)
						   [| { share__, terminate } |] (
						   UpdateIntegral::VS_O__(id__,
						   		    const_SpeedPID_S_P,
						   		    const_SpeedPID_S_I,
						   		    const_SpeedPID_S_maxIntegral)
						   [| { share__, terminate } |] (
						   UpdateOutput::VS_O__(id__,
						   		    const_SpeedPID_S_P,
						   		    const_SpeedPID_S_I,
						   		    const_SpeedPID_S_maxIntegral)
						   )
						   )
						   )
						 )
						 [[Read::interrupt <- x__ | x__ <- {|interrupt,snewError__.NID_Read.in|}]]
						 [[UpdateIntegral::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_UpdateIntegral|}]]
						 [[UpdateOutput::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_UpdateOutput|}]]
						 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
						 )
						  [[ share__ <- x__ | x__ <- {| share__,setR_currNewError |} ]] 
						 )
						 [| union(union(union(flowevts,transSync),{terminate}),{|share__
						 			,setR_currNewError
						 			|}) |]
						 ((i0::enter -> Transitions(id__,
						 		    const_SpeedPID_S_P,
						 		    const_SpeedPID_S_I,
						 		    const_SpeedPID_S_maxIntegral))
						  [[ share__ <- x__ | x__ <- {| share__ |} ]]
						  [[set_currNewError <- setR_currNewError]]
						 )
						)
						 [[setR_currNewError <- set_currNewError]]
						)
					)
					 \ hideSet)
					[[
						snewError__.x____ <- snewError,
						speedOutputE__.x____ <- speedOutputE
						| x____ <- NIDS
					]]
				)
				)
				 [| union(stateClockSync,{terminate}) |]
				 StateClocks(id__,
				 		          const_SpeedPID_S_P,
				 		          const_SpeedPID_S_I,
				 		          const_SpeedPID_S_maxIntegral)
				)\diff(stateClockSync,enteredSS))
				 [| {| interrupt |} |] SKIP)
			)
			)
		
		Behaviour_VS_O(id__,
				    const_SpeedPID_S_P,
				    const_SpeedPID_S_I,
				    const_SpeedPID_S_maxIntegral) = 
			dbisim((let
				stateClockSync = {|get_CLID_UpdateIntegral,UpdateIntegral::entered,get_CLID_Read,Read::entered,get_CLID_UpdateOutput,UpdateOutput::entered|}
			 within
				(MachineBody_VS_O(id__,
						    const_SpeedPID_S_P,
						    const_SpeedPID_S_I,
						    const_SpeedPID_S_maxIntegral) [| union(stateClockSync,{terminate}) |] StateClocks(id__,
						          const_SpeedPID_S_P,
						          const_SpeedPID_S_I,
						          const_SpeedPID_S_maxIntegral)) \ diff(union(stateClockSync,enteredSS),enteredSS)
			)
			)
		
		IteratedBehaviour_VS_O(id__,
				    const_SpeedPID_S_P,
				    const_SpeedPID_S_I,
				    const_SpeedPID_S_maxIntegral) = 
			dbisim((let
				stateClockSync = {|get_CLID_UpdateIntegral,UpdateIntegral::entered,get_CLID_Read,Read::entered,get_CLID_UpdateOutput,UpdateOutput::entered|}
			 within
				(dbisim(
					sbisim(
						dbisim(
							sbisim(
								dbisim(
									sbisim(
										MachineBody_VS_O(id__,
												    const_SpeedPID_S_P,
												    const_SpeedPID_S_I,
												    const_SpeedPID_S_maxIntegral)
										[| {|get_CLID_UpdateOutput,UpdateOutput::entered,terminate|} |]
										dbisim(Clock_CLID_UpdateOutput(id__,0,
												          const_SpeedPID_S_P,
												          const_SpeedPID_S_I,
												          const_SpeedPID_S_maxIntegral))
									)\{|get_CLID_UpdateOutput|}
								)
								[| {|get_CLID_Read,Read::entered,terminate|} |]
								dbisim(Clock_CLID_Read(id__,0,
										          const_SpeedPID_S_P,
										          const_SpeedPID_S_I,
										          const_SpeedPID_S_maxIntegral))
							)\{|get_CLID_Read|}
						)
						[| {|get_CLID_UpdateIntegral,UpdateIntegral::entered,terminate|} |]
						dbisim(Clock_CLID_UpdateIntegral(id__,0,
								          const_SpeedPID_S_P,
								          const_SpeedPID_S_I,
								          const_SpeedPID_S_maxIntegral))
					)\{|get_CLID_UpdateIntegral|}
				)
				) \ diff(union(stateClockSync,enteredSS),enteredSS)
			)
			)
		
		Stateful_VS_O(id__,
				    const_SpeedPID_S_P,
				    const_SpeedPID_S_I,
				    const_SpeedPID_S_maxIntegral) = 
			dbisim((let
				getsetLocalChannels = {|get_currNewError,set_currNewError,
				get_currSpeedOutput,set_currSpeedOutput,
				get_speedIntegral,set_speedIntegral|}
				clockSync = {||}
			within
				(Behaviour_VS_O(id__,
						    const_SpeedPID_S_P,
						    const_SpeedPID_S_I,
						    const_SpeedPID_S_maxIntegral) 
				 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
				 (varMemory(id__,
				 		    const_SpeedPID_S_P,
				 		    const_SpeedPID_S_I,
				 		    const_SpeedPID_S_maxIntegral) [| {terminate} |] Clocks(id__,
				 		          const_SpeedPID_S_P,
				 		          const_SpeedPID_S_I,
				 		          const_SpeedPID_S_maxIntegral))
			 	)\union(getsetLocalChannels,clockSync)
			)
			)
		
		IteratedStateful_VS_O(id__,
				    const_SpeedPID_S_P,
				    const_SpeedPID_S_I,
				    const_SpeedPID_S_maxIntegral) =
			(dbisim(
				sbisim(
					dbisim(
						sbisim(
							dbisim(
								sbisim(
									IteratedBehaviour_VS_O(id__,
											    const_SpeedPID_S_P,
											    const_SpeedPID_S_I,
											    const_SpeedPID_S_maxIntegral)
									[| {|get_speedIntegral,set_speedIntegral,terminate|} |]
									Memory_speedIntegral(0)
								)\{|get_speedIntegral,set_speedIntegral|}
							)
							[| {|get_currSpeedOutput,set_currSpeedOutput,terminate|} |]
							Memory_currSpeedOutput(0)
						)\{|get_currSpeedOutput,set_currSpeedOutput|}
					)
					[| {|get_currNewError,set_currNewError,terminate|} |]
					Memory_currNewError(0)
				)\{|get_currNewError,set_currNewError|}
			)
			)
		
		-- END
		
		-- Memory
		-- Memory variables
		Memory_currNewError(currNewError) =
			get_currNewError!currNewError -> Memory_currNewError(currNewError)
			[]
			set_currNewError?x__ -> Memory_currNewError(x__)
			[]
			terminate -> SKIP
		Memory_currSpeedOutput(currSpeedOutput) =
			get_currSpeedOutput!currSpeedOutput -> Memory_currSpeedOutput(currSpeedOutput)
			[]
			set_currSpeedOutput?x__ -> Memory_currSpeedOutput(x__)
			[]
			terminate -> SKIP
		Memory_speedIntegral(speedIntegral) =
			get_speedIntegral!speedIntegral -> Memory_speedIntegral(speedIntegral)
			[]
			set_speedIntegral?x__ -> Memory_speedIntegral(x__)
			[]
			terminate -> SKIP
		
		-- varMemory process
		varMemory(id__,
				    const_SpeedPID_S_P,
				    const_SpeedPID_S_I,
				    const_SpeedPID_S_maxIntegral) = Memory_currNewError(0)
		[| { terminate } |] (
		Memory_currSpeedOutput(0)
		[| { terminate } |] (
		Memory_speedIntegral(0)
		)
		)
		
		getsetLocalChannels = {|get_currNewError,set_currNewError,get_currSpeedOutput,set_currSpeedOutput,get_speedIntegral,set_speedIntegral|}
		
		-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
		FVS__(id__,
				    const_SpeedPID_S_P,
				    const_SpeedPID_S_I,
				    const_SpeedPID_S_maxIntegral) = STM_VS_O(id__,
				    const_SpeedPID_S_P,
				    const_SpeedPID_S_I,
				    const_SpeedPID_S_maxIntegral) \ localClockResets
		D__(id__,
				    const_SpeedPID_S_P,
				    const_SpeedPID_S_I,
				    const_SpeedPID_S_maxIntegral) = timed_priority(STM(id__,
				    const_SpeedPID_S_P,
				    const_SpeedPID_S_I,
				    const_SpeedPID_S_maxIntegral) \ union(internal_events,localClockResets))
		O__(id__,
				    const_SpeedPID_S_P,
				    const_SpeedPID_S_I,
				    const_SpeedPID_S_maxIntegral) = dbisim(D__(id__,
				    const_SpeedPID_S_P,
				    const_SpeedPID_S_I,
				    const_SpeedPID_S_maxIntegral))
		VS__(id__,
				    const_SpeedPID_S_P,
				    const_SpeedPID_S_I,
				    const_SpeedPID_S_maxIntegral) = FVS__(id__,
				    const_SpeedPID_S_P,
				    const_SpeedPID_S_I,
				    const_SpeedPID_S_maxIntegral)
		VS_O__(id__,
				    const_SpeedPID_S_P,
				    const_SpeedPID_S_I,
				    const_SpeedPID_S_maxIntegral) = dbisim(FVS__(id__,
				    const_SpeedPID_S_P,
				    const_SpeedPID_S_I,
				    const_SpeedPID_S_maxIntegral))
		HEXT__(id__,
				    const_SpeedPID_S_P,
				    const_SpeedPID_S_I,
				    const_SpeedPID_S_maxIntegral) = O__(id__,
				    const_SpeedPID_S_P,
				    const_SpeedPID_S_I,
				    const_SpeedPID_S_maxIntegral) [|shared_variable_events|] SKIP
		FVS_C__(id__,
				    const_SpeedPID_S_P,
				    const_SpeedPID_S_I,
				    const_SpeedPID_S_maxIntegral) = dbisim(timed_priority(STM(id__,
				    const_SpeedPID_S_P,
				    const_SpeedPID_S_I,
				    const_SpeedPID_S_maxIntegral) \ internal_events))
		HUP__(id__,
				    const_SpeedPID_S_P,
				    const_SpeedPID_S_I,
				    const_SpeedPID_S_maxIntegral) = timed_priority(O__(id__,
				    const_SpeedPID_S_P,
				    const_SpeedPID_S_I,
				    const_SpeedPID_S_maxIntegral) [|{share__}|] SKIP)
		
		-- Clocks
		
		Clocks(id__,
				          const_SpeedPID_S_P,
				          const_SpeedPID_S_I,
				          const_SpeedPID_S_maxIntegral) = terminate -> SKIP
		
		clockSync = {||}
		
		Clock_CLID_UpdateIntegral(id__,x__,
				          const_SpeedPID_S_P,
				          const_SpeedPID_S_I,
				          const_SpeedPID_S_maxIntegral) = 
			TimeOut_1(
				UpdateIntegral::entered -> Clock_CLID_UpdateIntegral(id__,0,
						          const_SpeedPID_S_P,
						          const_SpeedPID_S_I,
						          const_SpeedPID_S_maxIntegral)
				[]
				get_CLID_UpdateIntegral!x__ -> Clock_CLID_UpdateIntegral(id__,x__,
						          const_SpeedPID_S_P,
						          const_SpeedPID_S_I,
						          const_SpeedPID_S_maxIntegral)
				[]
				terminate -> SKIP,Clock_CLID_UpdateIntegral(id__,clock_type_plus(x__,1,CLID_UpdateIntegral_clock_type(id__,
						          const_SpeedPID_S_P,
						          const_SpeedPID_S_I,
						          const_SpeedPID_S_maxIntegral)),
						          const_SpeedPID_S_P,
						          const_SpeedPID_S_I,
						          const_SpeedPID_S_maxIntegral))
		Clock_CLID_Read(id__,x__,
				          const_SpeedPID_S_P,
				          const_SpeedPID_S_I,
				          const_SpeedPID_S_maxIntegral) = 
			TimeOut_1(
				Read::entered -> Clock_CLID_Read(id__,0,
						          const_SpeedPID_S_P,
						          const_SpeedPID_S_I,
						          const_SpeedPID_S_maxIntegral)
				[]
				get_CLID_Read!x__ -> Clock_CLID_Read(id__,x__,
						          const_SpeedPID_S_P,
						          const_SpeedPID_S_I,
						          const_SpeedPID_S_maxIntegral)
				[]
				terminate -> SKIP,Clock_CLID_Read(id__,clock_type_plus(x__,1,CLID_Read_clock_type(id__,
						          const_SpeedPID_S_P,
						          const_SpeedPID_S_I,
						          const_SpeedPID_S_maxIntegral)),
						          const_SpeedPID_S_P,
						          const_SpeedPID_S_I,
						          const_SpeedPID_S_maxIntegral))
		Clock_CLID_UpdateOutput(id__,x__,
				          const_SpeedPID_S_P,
				          const_SpeedPID_S_I,
				          const_SpeedPID_S_maxIntegral) = 
			TimeOut_1(
				UpdateOutput::entered -> Clock_CLID_UpdateOutput(id__,0,
						          const_SpeedPID_S_P,
						          const_SpeedPID_S_I,
						          const_SpeedPID_S_maxIntegral)
				[]
				get_CLID_UpdateOutput!x__ -> Clock_CLID_UpdateOutput(id__,x__,
						          const_SpeedPID_S_P,
						          const_SpeedPID_S_I,
						          const_SpeedPID_S_maxIntegral)
				[]
				terminate -> SKIP,Clock_CLID_UpdateOutput(id__,clock_type_plus(x__,1,CLID_UpdateOutput_clock_type(id__,
						          const_SpeedPID_S_P,
						          const_SpeedPID_S_I,
						          const_SpeedPID_S_maxIntegral)),
						          const_SpeedPID_S_P,
						          const_SpeedPID_S_I,
						          const_SpeedPID_S_maxIntegral))
		
		StateClocks(id__,
				          const_SpeedPID_S_P,
				          const_SpeedPID_S_I,
				          const_SpeedPID_S_maxIntegral) = dbisim(Clock_CLID_UpdateIntegral(id__,0,
				          const_SpeedPID_S_P,
				          const_SpeedPID_S_I,
				          const_SpeedPID_S_maxIntegral))
		[| { terminate } |] (
		dbisim(Clock_CLID_Read(id__,0,
				          const_SpeedPID_S_P,
				          const_SpeedPID_S_I,
				          const_SpeedPID_S_maxIntegral))
		[| { terminate } |] (
		dbisim(Clock_CLID_UpdateOutput(id__,0,
				          const_SpeedPID_S_P,
				          const_SpeedPID_S_I,
				          const_SpeedPID_S_maxIntegral))
		)
		)
		
		stateClockSync = {|get_CLID_UpdateIntegral,UpdateIntegral::entered,get_CLID_Read,Read::entered,get_CLID_UpdateOutput,UpdateOutput::entered|}
		
		-- Shared memory
		-- Shared memory variables
		
		-- sharedVarMemory process
		sharedVarMemory(id__,
				    const_SpeedPID_S_P,
				    const_SpeedPID_S_I,
				    const_SpeedPID_S_maxIntegral) = terminate -> SKIP
		
		sharedVarSync = {||}
		
		sharedVarHide = {||}
		}
endmodule
