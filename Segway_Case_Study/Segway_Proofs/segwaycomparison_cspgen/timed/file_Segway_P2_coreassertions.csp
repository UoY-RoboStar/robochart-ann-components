
--
-- RoboChart generator version 3.0.0.202306261132
-- Automatically generated on 22-08-2023 01:53:02
--
-- Iterated compression status: true
-- Assertions compression status: false
--

include "file_Segway_P2.csp"




-- generate Segway_P2
P_Segway_P2 = let
	id__ = 0
	
	
	
	const_Segway_P2_SegwayController_stm_ref3_D = const_RotationPID_S_D
	const_Segway_P2_SegwayController_stm_ref2_P = const_SpeedPID_S_P
	const_Segway_P2_SegwayController_stm_ref2_I = const_SpeedPID_S_I
	const_Segway_P2_SegwayController_stm_ref2_maxIntegral = const_SpeedPID_S_maxIntegral
	const_Segway_P2_SegwayController_stm_ref0_maxAngle = const_BalanceSTM_P2_maxAngle
	const_Segway_P2_SegwayController_stm_ref0_loopTime = const_BalanceSTM_P2_loopTime
	const_Segway_P2_SegwayController_stm_ref0_startupDelay = const_BalanceSTM_P2_startupDelay
	const_Segway_P2_SegwayController_stm_ref0_speedUpdate = const_BalanceSTM_P2_speedUpdate
	const_Segway_P2_SegwayController_stm_ref0_rotationUpdate = const_BalanceSTM_P2_rotationUpdate
	const_Segway_P2_SegwayController_stm_ref0_motorBudget = const_BalanceSTM_P2_motorBudget
	const_Segway_P2_SegwayController_stm_ref0_angleBudget = const_BalanceSTM_P2_angleBudget
	const_Segway_P2_SegwayController_stm_ref0_speedBudget = const_BalanceSTM_P2_speedBudget
	const_Segway_P2_SegwayController_stm_ref0_rotationBudget = const_BalanceSTM_P2_rotationBudget
	const_Segway_P2_SegwayController_stm_ref1_P = const_AnglePID_S_P
	const_Segway_P2_SegwayController_stm_ref1_D = const_AnglePID_S_D
		
	
within
	Segway_P2::O__(id__,
			    const_Segway_P2_SegwayController_stm_ref0_maxAngle,
			    const_Segway_P2_SegwayController_stm_ref0_loopTime,
			    const_Segway_P2_SegwayController_stm_ref0_startupDelay,
			    const_Segway_P2_SegwayController_stm_ref0_speedUpdate,
			    const_Segway_P2_SegwayController_stm_ref0_rotationUpdate,
			    const_Segway_P2_SegwayController_stm_ref0_motorBudget,
			    const_Segway_P2_SegwayController_stm_ref0_angleBudget,
			    const_Segway_P2_SegwayController_stm_ref0_speedBudget,
			    const_Segway_P2_SegwayController_stm_ref0_rotationBudget,
			    const_Segway_P2_SegwayController_stm_ref1_P,
			    const_Segway_P2_SegwayController_stm_ref1_D,
			    const_Segway_P2_SegwayController_stm_ref2_P,
			    const_Segway_P2_SegwayController_stm_ref2_I,
			    const_Segway_P2_SegwayController_stm_ref2_maxIntegral,
			    const_Segway_P2_SegwayController_stm_ref3_D)
assert P_Segway_P2 :[deadlock-free]	
assert P_Segway_P2;RUN({r__}) :[deadlock-free]
assert P_Segway_P2 :[deterministic]
assert P_Segway_P2 :[divergence-free]

-- generate Segway_P2_SegwayController
P_Segway_P2_SegwayController = let
	id__ = 0
	
	
	
	const_Segway_P2_SegwayController_stm_ref0_maxAngle = const_BalanceSTM_P2_maxAngle
	const_Segway_P2_SegwayController_stm_ref0_loopTime = const_BalanceSTM_P2_loopTime
	const_Segway_P2_SegwayController_stm_ref0_startupDelay = const_BalanceSTM_P2_startupDelay
	const_Segway_P2_SegwayController_stm_ref0_speedUpdate = const_BalanceSTM_P2_speedUpdate
	const_Segway_P2_SegwayController_stm_ref0_rotationUpdate = const_BalanceSTM_P2_rotationUpdate
	const_Segway_P2_SegwayController_stm_ref0_motorBudget = const_BalanceSTM_P2_motorBudget
	const_Segway_P2_SegwayController_stm_ref0_angleBudget = const_BalanceSTM_P2_angleBudget
	const_Segway_P2_SegwayController_stm_ref0_speedBudget = const_BalanceSTM_P2_speedBudget
	const_Segway_P2_SegwayController_stm_ref0_rotationBudget = const_BalanceSTM_P2_rotationBudget
	const_Segway_P2_SegwayController_stm_ref1_P = const_AnglePID_S_P
	const_Segway_P2_SegwayController_stm_ref1_D = const_AnglePID_S_D
	const_Segway_P2_SegwayController_stm_ref2_P = const_SpeedPID_S_P
	const_Segway_P2_SegwayController_stm_ref2_I = const_SpeedPID_S_I
	const_Segway_P2_SegwayController_stm_ref2_maxIntegral = const_SpeedPID_S_maxIntegral
	const_Segway_P2_SegwayController_stm_ref3_D = const_RotationPID_S_D
		
within
	Segway_P2::SegwayController::O__(id__,
			    const_Segway_P2_SegwayController_stm_ref0_maxAngle,
			    const_Segway_P2_SegwayController_stm_ref0_loopTime,
			    const_Segway_P2_SegwayController_stm_ref0_startupDelay,
			    const_Segway_P2_SegwayController_stm_ref0_speedUpdate,
			    const_Segway_P2_SegwayController_stm_ref0_rotationUpdate,
			    const_Segway_P2_SegwayController_stm_ref0_motorBudget,
			    const_Segway_P2_SegwayController_stm_ref0_angleBudget,
			    const_Segway_P2_SegwayController_stm_ref0_speedBudget,
			    const_Segway_P2_SegwayController_stm_ref0_rotationBudget,
			    const_Segway_P2_SegwayController_stm_ref1_P,
			    const_Segway_P2_SegwayController_stm_ref1_D,
			    const_Segway_P2_SegwayController_stm_ref2_P,
			    const_Segway_P2_SegwayController_stm_ref2_I,
			    const_Segway_P2_SegwayController_stm_ref2_maxIntegral,
			    const_Segway_P2_SegwayController_stm_ref3_D)

assert P_Segway_P2_SegwayController :[deadlock-free]	
assert P_Segway_P2_SegwayController;RUN({r__}) :[deadlock-free]
assert P_Segway_P2_SegwayController :[deterministic]
assert P_Segway_P2_SegwayController :[divergence-free]

-- generate Segway_P2_SegwayController_stm_ref0
P_Segway_P2_SegwayController_stm_ref0 = let
	id__ = 0
	
	
	
within
	Segway_P2::SegwayController::stm_ref0::O__(
		id__,
		const_BalanceSTM_P2_maxAngle,
		const_BalanceSTM_P2_loopTime,
		const_BalanceSTM_P2_startupDelay,
		const_BalanceSTM_P2_speedUpdate,
		const_BalanceSTM_P2_rotationUpdate,
		const_BalanceSTM_P2_motorBudget,
		const_BalanceSTM_P2_angleBudget,
		const_BalanceSTM_P2_speedBudget,
		const_BalanceSTM_P2_rotationBudget
	)
assert P_Segway_P2_SegwayController_stm_ref0 :[deadlock-free]	
assert P_Segway_P2_SegwayController_stm_ref0;RUN({r__}) :[deadlock-free]
assert P_Segway_P2_SegwayController_stm_ref0 :[deterministic]
assert P_Segway_P2_SegwayController_stm_ref0 :[divergence-free]
-- timed deadlock free
assert prioritise(P_Segway_P2_SegwayController_stm_ref0[[tock<-tock,tock<-tock']],<diff(Events,{tock',tock}),{tock}>)\{tock} :[divergence free [FD]]

-- timelock free
assert RUN({tock}) ||| CHAOS(diff(Events,{|tock|})) [F= P_Segway_P2_SegwayController_stm_ref0
-- generate Segway_P2_SegwayController_stm_ref1
P_Segway_P2_SegwayController_stm_ref1 = let
	id__ = 0
	
	
	
within
	Segway_P2::SegwayController::stm_ref1::O__(
		id__,
		const_AnglePID_S_P,
		const_AnglePID_S_D
	)
assert P_Segway_P2_SegwayController_stm_ref1 :[deadlock-free]	
assert P_Segway_P2_SegwayController_stm_ref1;RUN({r__}) :[deadlock-free]
assert P_Segway_P2_SegwayController_stm_ref1 :[deterministic]
assert P_Segway_P2_SegwayController_stm_ref1 :[divergence-free]
-- timed deadlock free
assert prioritise(P_Segway_P2_SegwayController_stm_ref1[[tock<-tock,tock<-tock']],<diff(Events,{tock',tock}),{tock}>)\{tock} :[divergence free [FD]]

-- timelock free
assert RUN({tock}) ||| CHAOS(diff(Events,{|tock|})) [F= P_Segway_P2_SegwayController_stm_ref1
-- generate Segway_P2_SegwayController_stm_ref2
P_Segway_P2_SegwayController_stm_ref2 = let
	id__ = 0
	
	
	
within
	Segway_P2::SegwayController::stm_ref2::O__(
		id__,
		const_SpeedPID_S_P,
		const_SpeedPID_S_I,
		const_SpeedPID_S_maxIntegral
	)
assert P_Segway_P2_SegwayController_stm_ref2 :[deadlock-free]	
assert P_Segway_P2_SegwayController_stm_ref2;RUN({r__}) :[deadlock-free]
assert P_Segway_P2_SegwayController_stm_ref2 :[deterministic]
assert P_Segway_P2_SegwayController_stm_ref2 :[divergence-free]
-- timed deadlock free
assert prioritise(P_Segway_P2_SegwayController_stm_ref2[[tock<-tock,tock<-tock']],<diff(Events,{tock',tock}),{tock}>)\{tock} :[divergence free [FD]]

-- timelock free
assert RUN({tock}) ||| CHAOS(diff(Events,{|tock|})) [F= P_Segway_P2_SegwayController_stm_ref2
-- generate Segway_P2_SegwayController_stm_ref3
P_Segway_P2_SegwayController_stm_ref3 = let
	id__ = 0
	
	
	
within
	Segway_P2::SegwayController::stm_ref3::O__(
		id__,
		const_RotationPID_S_D
	)
assert P_Segway_P2_SegwayController_stm_ref3 :[deadlock-free]	
assert P_Segway_P2_SegwayController_stm_ref3;RUN({r__}) :[deadlock-free]
assert P_Segway_P2_SegwayController_stm_ref3 :[deterministic]
assert P_Segway_P2_SegwayController_stm_ref3 :[divergence-free]
-- timed deadlock free
assert prioritise(P_Segway_P2_SegwayController_stm_ref3[[tock<-tock,tock<-tock']],<diff(Events,{tock',tock}),{tock}>)\{tock} :[divergence free [FD]]

-- timelock free
assert RUN({tock}) ||| CHAOS(diff(Events,{|tock|})) [F= P_Segway_P2_SegwayController_stm_ref3
-- timed deadlock free
assert prioritise(P_Segway_P2_SegwayController[[tock<-tock,tock<-tock']],<diff(Events,{tock',tock}),{tock}>)\{tock} :[divergence free [FD]]

-- timelock free
assert RUN({tock}) ||| CHAOS(diff(Events,{|tock|})) [F= P_Segway_P2_SegwayController
-- timed deadlock free
assert prioritise(P_Segway_P2[[tock<-tock,tock<-tock']],<diff(Events,{tock',tock}),{tock}>)\{tock} :[divergence free [FD]]

-- timelock free
assert RUN({tock}) ||| CHAOS(diff(Events,{|tock|})) [F= P_Segway_P2
