
--
-- RoboChart generator version 3.0.0.202306261132
-- Automatically generated on 22-08-2023 01:53:02
--
-- MODIFIED: The O__ process has been replaced with an ANN semantics.

	module Segway_P3_AnglePID_C
		shared_variable_events = {|
		|}
		
	exports

    --ORIGINAL MODULE: 
		transparent diamond
		transparent sbisim
		transparent dbisim
		transparent chase

		-- declaring controller events
		channel angleOutputE: InOut.core_real
		channel anewError: InOut.core_real
		channel adiff: InOut.core_real
		
		
		
		-- declaring call and ret events for undefined operations
		
		-- declaring controller termination channel
		channel terminate
		
		-- channel set with all visible events
		sem__events = {|
			terminate
		,	angleOutputE,
			anewError,
			adiff
		|}

		-- defined operations
	
		-- declaring machines
		module stm_ref0
		exports
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
		
			-- Transition identifiers
			-- declaring identifiers of transitions
			datatype NIDS = 
			              NID_i0|
			              NID_Read|
			              NID_UpdateOutput
			
			channel internal__ : NIDS
			
			-- Flow channels		
			channel interrupt
			channel exited
			channel exit
			channel terminate
			
			-- Variable channels
			channel get_currAngleOut, set_currAngleOut, setL_currAngleOut, setR_currAngleOut: core_real
			channel get_currNewError, set_currNewError, setL_currNewError, setR_currNewError: core_real
			channel get_currDiff, set_currDiff, setL_currDiff, setR_currDiff: core_real
			
			-- Shared variable channels
			
			-- Local variable channels for defined operations that are required by the state machine
			
			-- Declaring state machine events
			channel angleOutputE__: NIDS.InOut.core_real
			channel angleOutputE: InOut.core_real
			channel anewError__: NIDS.InOut.core_real
			channel anewError: InOut.core_real
			channel adiff__: NIDS.InOut.core_real
			channel adiff: InOut.core_real
			
			-- Declaring call and ret events for undefined operations
			
			enterSS = {|
			i0::enter,
			Read::enter,
			UpdateOutput::enter
			|}
			
			enteredSS = 	{|
			Read::entered,
			UpdateOutput::entered
			|}
			
			internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
			
			shared_variable_events = {|
			|}
			
			-- channel set with all visible events
			sem__events = {|
				terminate
			,	angleOutputE,
				anewError,
				adiff
				|}
		
			-- Nodes --
			-- declaring all nodes
			
			----------------------------------------------------------------------
			-- Initial: i0
			module i0
			exports
			
				channel enter, interrupt
				
				D__(id__,
						    const_AnglePID_S_P,
						    const_AnglePID_S_D) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= share__choice(interrupt -> SKIP) ; Inactive
					within
						Inactive [| {terminate} |> SKIP)
				
				VS_O__(id__,
						    const_AnglePID_S_P,
						    const_AnglePID_S_D) = D__(id__,
						    const_AnglePID_S_P,
						    const_AnglePID_S_D)
			
			endmodule
			----------------------------------------------------------------------
			
			
			----------------------------------------------------------------------
			-- State: Read
			module Read
			
			enterSS = {}
			
			enteredSS = {}
			
			exports
			
				--  Declarations
				
				channel enter, entered, interrupt
				channel enteredL, enteredR
				
								
				
				--	Nodes
				-- declaring all nodes
				
				
				--	Rule: behaviours(Node)
				--  Note that FDR has problems with efficiently compiling the process below
				-- 	if using a different recursion pattern.
				D__(id__,
						    const_AnglePID_S_P,
						    const_AnglePID_S_D) = 
				dbisim(let
					-- IMPLEMENTATION NOTE: 
					-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
					-- however FDR struggles with that form in certain cases. So we use the exception operator
					-- instead to 'terminate'.
					
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= true&(share__choice(anewError.in?currNewError -> (SStop /\ set_currNewError!currNewError -> SKIP)));true&(share__choice(adiff.in?currDiff -> (SStop /\ set_currDiff!currDiff -> SKIP))) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__,
						    const_AnglePID_S_P,
						    const_AnglePID_S_D) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= true&(share__choice(anewError.in?currNewError -> (SStop /\ set_currNewError!currNewError -> SKIP)));true&(share__choice(adiff.in?currDiff -> (SStop /\ set_currDiff!currDiff -> SKIP))) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
				
			
			endmodule
			----------------------------------------------------------------------
			
			
			----------------------------------------------------------------------
			-- State: UpdateOutput
			module UpdateOutput
			
			enterSS = {}
			
			enteredSS = {}
			
			exports
			
				--  Declarations
				
				channel enter, entered, interrupt
				channel enteredL, enteredR
				
								
				
				--	Nodes
				-- declaring all nodes
				
				
				--	Rule: behaviours(Node)
				--  Note that FDR has problems with efficiently compiling the process below
				-- 	if using a different recursion pattern.
				D__(id__,
						    const_AnglePID_S_P,
						    const_AnglePID_S_D) = 
				dbisim(let
					-- IMPLEMENTATION NOTE: 
					-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
					-- however FDR struggles with that form in certain cases. So we use the exception operator
					-- instead to 'terminate'.
					
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= share__choice(share__choice(get_currNewError?currNewError -> share__choice(get_currDiff?currDiff -> true & (share__choice(set_currAngleOut!Plus(Mult(currNewError, const_AnglePID_S_P, core_real), Mult(currDiff, const_AnglePID_S_D, core_real), core_real) -> SKIP))))) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__,
						    const_AnglePID_S_P,
						    const_AnglePID_S_D) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= share__choice(share__choice(get_currNewError?currNewError -> share__choice(get_currDiff?currDiff -> true & (share__choice(set_currAngleOut!Plus(Mult(currNewError, const_AnglePID_S_P, core_real), Mult(currDiff, const_AnglePID_S_D, core_real), core_real) -> SKIP))))) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
				
			
			endmodule
			----------------------------------------------------------------------
			
			-- END of Nodes --
			
			-- Operation calls --
			-- Only the undefined operations are declared here.
			-- If the state machine is in isolation, all required operations will be undefined.
			-- If it is in the context of a controller, the required operations not provided by the
			-- controller will be declared here, and the defined operations will be defined in the
			-- context of the Controller module, and therefore within scope of the state machine module.
			
			-- END of Operation calls --
			
			-- STM processes
			STM(id__,
					    const_AnglePID_S_P,
					    const_AnglePID_S_D) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
			( 
				(
					(
						(IteratedStateful(id__,
								    const_AnglePID_S_P,
								    const_AnglePID_S_D) \ {terminate} ; share__choice(terminate -> SKIP))
					 	[[ share__ <- x__ | x__ <- {||} ]]
					)
				[| {share__} |]
				SKIP
				)
				[| union(sharedVarSync,{terminate}) |]
				dbisim(sharedVarMemory(id__,
						    const_AnglePID_S_P,
						    const_AnglePID_S_D))
			)\sharedVarHide
			
			STM_VS_O(id__,
					    const_AnglePID_S_P,
					    const_AnglePID_S_D) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
			( 
				(
					(
						(IteratedStateful_VS_O(id__,
								    const_AnglePID_S_P,
								    const_AnglePID_S_D) \ {terminate} ; share__choice(terminate -> SKIP))
					 	[[ share__ <- x__ | x__ <- {||} ]]
					)
				[| {share__} |]
				SKIP
				)
				[| union(sharedVarSync,{terminate}) |]
				dbisim(sharedVarMemory(id__,
						    const_AnglePID_S_P,
						    const_AnglePID_S_D))
			)\sharedVarHide
			
			-- Transitions
			Transitions(id__,
					    const_AnglePID_S_P,
					    const_AnglePID_S_D) = ((let
				Trans = (
					((share__ -> SKIP
					 [] dbisim((true)&(internal__!NID_Read -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; UpdateOutput::enter -> SKIP)))
					 	 [] dbisim((true)&(internal__!NID_UpdateOutput -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(get_currAngleOut?currAngleOut -> true&(share__choice(angleOutputE.out!currAngleOut -> SKIP))) ; Read::enter -> SKIP)))
					 	 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; Read::enter -> SKIP))))
					 ) ; Trans)
					 []
					 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
					 []
					 terminate -> SKIP
				)
			within
				Trans
			)
			)
			
			-- Stateful
			-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
			
			-- Named process definitions
			MachineBody(id__,
					    const_AnglePID_S_P,
					    const_AnglePID_S_D) = 
				dbisim((
				let
					finalNodesEntered = {||}
				within
					((let
						-- IMPLEMENTATION NOTE:
						-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
						-- modules for defining the semantics of each node.
						enterSS = {|
						i0::enter,
						Read::enter,
						UpdateOutput::enter
						|}
						hideSet = union(enterSS,{|exit,exited,internal__|})
					within 
						((let
							-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
							-- because CSPM modules are used for the semantics of Node.
							flowevts = union(enterSS,{|exit,exited,interrupt|})
							transSync = {|internal__.NID_Read,internal__.NID_UpdateOutput,internal__.NID_i0|}
						within
							((
							 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
							   i0::D__(id__,
							   		    const_AnglePID_S_P,
							   		    const_AnglePID_S_D)
							   [| { share__, terminate } |] (
							   Read::D__(id__,
							   		    const_AnglePID_S_P,
							   		    const_AnglePID_S_D)
							   [| { share__, terminate } |] (
							   UpdateOutput::D__(id__,
							   		    const_AnglePID_S_P,
							   		    const_AnglePID_S_D)
							   )
							   )
							 )
							 [[Read::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_Read|}]]
							 [[UpdateOutput::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_UpdateOutput|}]]
							 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
							 )
							  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
							 )
							 [| union(union(union(flowevts,transSync),{terminate}),{|share__
							|}) |]
							 ((i0::enter -> Transitions(id__,
							 		    const_AnglePID_S_P,
							 		    const_AnglePID_S_D))
							  [[ share__ <- x__ | x__ <- {| share__ |} ]]
							 )
							)
							)
						)
						 \ hideSet)
						[[
							angleOutputE__.x____ <- angleOutputE,
							anewError__.x____ <- anewError,
							adiff__.x____ <- adiff
							| x____ <- NIDS
						]]
					)
					 [| {| interrupt |} |] SKIP)
				)
				)
			
			Behaviour(id__,
					    const_AnglePID_S_P,
					    const_AnglePID_S_D) = 
				dbisim((MachineBody(id__,
						    const_AnglePID_S_P,
						    const_AnglePID_S_D)\ enteredSS)
				)
			
			IteratedBehaviour(id__,
					    const_AnglePID_S_P,
					    const_AnglePID_S_D) = 
				dbisim((MachineBody(id__,
						    const_AnglePID_S_P,
						    const_AnglePID_S_D)\ enteredSS)
				)
			
			Stateful(id__,
					    const_AnglePID_S_P,
					    const_AnglePID_S_D) = 
				((
					(Behaviour(id__,
							    const_AnglePID_S_P,
							    const_AnglePID_S_D) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__,
							    const_AnglePID_S_P,
							    const_AnglePID_S_D))
				 	\getsetLocalChannels
				)
				)
			
			IteratedStateful(id__,
					    const_AnglePID_S_P,
					    const_AnglePID_S_D) =
				(dbisim(
					sbisim(
						dbisim(
							sbisim(
								dbisim(
									sbisim(
										Behaviour(id__,
												    const_AnglePID_S_P,
												    const_AnglePID_S_D)
										[| {|get_currDiff,set_currDiff,terminate|} |]
										Memory_currDiff(0)
									)\{|get_currDiff,set_currDiff|}
								)
								[| {|get_currNewError,set_currNewError,terminate|} |]
								Memory_currNewError(0)
							)\{|get_currNewError,set_currNewError|}
						)
						[| {|get_currAngleOut,set_currAngleOut,terminate|} |]
						Memory_currAngleOut(0)
					)\{|get_currAngleOut,set_currAngleOut|}
				)
				)
			
			-- Visible counterparts
			MachineBody_VS_O(id__,
					    const_AnglePID_S_P,
					    const_AnglePID_S_D) = 
				dbisim((
				let
					finalNodesEntered = {||}
				within
					((let
						-- IMPLEMENTATION NOTE:
						-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
						-- modules for defining the semantics of each node.
						enterSS = {|
						i0::enter,
						Read::enter,
						UpdateOutput::enter
						|}
						hideSet = union(enterSS,{|exit,exited,internal__|})
					within 
						((let
							-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
							-- because CSPM modules are used for the semantics of Node.
							flowevts = union(enterSS,{|exit,exited,interrupt|})
							transSync = {|internal__.NID_Read,internal__.NID_UpdateOutput,internal__.NID_i0|}
						within
							((
							 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
							   i0::VS_O__(id__,
							   		    const_AnglePID_S_P,
							   		    const_AnglePID_S_D)
							   [| { share__, terminate } |] (
							   Read::VS_O__(id__,
							   		    const_AnglePID_S_P,
							   		    const_AnglePID_S_D)
							   [| { share__, terminate } |] (
							   UpdateOutput::VS_O__(id__,
							   		    const_AnglePID_S_P,
							   		    const_AnglePID_S_D)
							   )
							   )
							 )
							 [[Read::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_Read|}]]
							 [[UpdateOutput::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_UpdateOutput|}]]
							 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
							 )
							  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
							 )
							 [| union(union(union(flowevts,transSync),{terminate}),{|share__
							|}) |]
							 ((i0::enter -> Transitions(id__,
							 		    const_AnglePID_S_P,
							 		    const_AnglePID_S_D))
							  [[ share__ <- x__ | x__ <- {| share__ |} ]]
							 )
							)
							)
						)
						 \ hideSet)
						[[
							angleOutputE__.x____ <- angleOutputE,
							anewError__.x____ <- anewError,
							adiff__.x____ <- adiff
							| x____ <- NIDS
						]]
					)
					 [| {| interrupt |} |] SKIP)
				)
				)
			
			Behaviour_VS_O(id__,
					    const_AnglePID_S_P,
					    const_AnglePID_S_D) = 
				dbisim((MachineBody_VS_O(id__,
						    const_AnglePID_S_P,
						    const_AnglePID_S_D))
				)
			
			IteratedBehaviour_VS_O(id__,
					    const_AnglePID_S_P,
					    const_AnglePID_S_D) = 
				dbisim((MachineBody_VS_O(id__,
						    const_AnglePID_S_P,
						    const_AnglePID_S_D))
				)
			
			Stateful_VS_O(id__,
					    const_AnglePID_S_P,
					    const_AnglePID_S_D) = 
				dbisim((
					(Behaviour_VS_O(id__,
							    const_AnglePID_S_P,
							    const_AnglePID_S_D) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__,
							    const_AnglePID_S_P,
							    const_AnglePID_S_D))
				 	\getsetLocalChannels
				)
				)
			
			IteratedStateful_VS_O(id__,
					    const_AnglePID_S_P,
					    const_AnglePID_S_D) =
				(dbisim(
					sbisim(
						dbisim(
							sbisim(
								dbisim(
									sbisim(
										Behaviour_VS_O(id__,
												    const_AnglePID_S_P,
												    const_AnglePID_S_D)
										[| {|get_currDiff,set_currDiff,terminate|} |]
										Memory_currDiff(0)
									)\{|get_currDiff,set_currDiff|}
								)
								[| {|get_currNewError,set_currNewError,terminate|} |]
								Memory_currNewError(0)
							)\{|get_currNewError,set_currNewError|}
						)
						[| {|get_currAngleOut,set_currAngleOut,terminate|} |]
						Memory_currAngleOut(0)
					)\{|get_currAngleOut,set_currAngleOut|}
				)
				)
			
			-- END
			
			-- Memory
			-- Memory variables
			Memory_currAngleOut(currAngleOut) =
				get_currAngleOut!currAngleOut -> Memory_currAngleOut(currAngleOut)
				[]
				set_currAngleOut?x__ -> Memory_currAngleOut(x__)
				[]
				terminate -> SKIP
			Memory_currNewError(currNewError) =
				get_currNewError!currNewError -> Memory_currNewError(currNewError)
				[]
				set_currNewError?x__ -> Memory_currNewError(x__)
				[]
				terminate -> SKIP
			Memory_currDiff(currDiff) =
				get_currDiff!currDiff -> Memory_currDiff(currDiff)
				[]
				set_currDiff?x__ -> Memory_currDiff(x__)
				[]
				terminate -> SKIP
			
			-- varMemory process
			varMemory(id__,
					    const_AnglePID_S_P,
					    const_AnglePID_S_D) = Memory_currAngleOut(0)
			[| { terminate } |] (
			Memory_currNewError(0)
			[| { terminate } |] (
			Memory_currDiff(0)
			)
			)
			
			getsetLocalChannels = {|get_currAngleOut,set_currAngleOut,get_currNewError,set_currNewError,get_currDiff,set_currDiff|}
			
			-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
			FVS__(id__,
					    const_AnglePID_S_P,
					    const_AnglePID_S_D) = STM_VS_O(id__,
					    const_AnglePID_S_P,
					    const_AnglePID_S_D)
			
			D__(id__,
					    const_AnglePID_S_P,
					    const_AnglePID_S_D) = STM(id__,
					    const_AnglePID_S_P,
					    const_AnglePID_S_D) \ internal_events
			O__(id__,
					    const_AnglePID_S_P,
					    const_AnglePID_S_D) = sbisim(diamond(D__(id__,
					    const_AnglePID_S_P,
					    const_AnglePID_S_D)))
			VS__(id__,
					    const_AnglePID_S_P,
					    const_AnglePID_S_D) = FVS__(id__,
					    const_AnglePID_S_P,
					    const_AnglePID_S_D)
			VS_O__(id__,
					    const_AnglePID_S_P,
					    const_AnglePID_S_D) = sbisim(diamond(FVS__(id__,
					    const_AnglePID_S_P,
					    const_AnglePID_S_D)))
			HEXT__(id__,
					    const_AnglePID_S_P,
					    const_AnglePID_S_D) = O__(id__,
					    const_AnglePID_S_P,
					    const_AnglePID_S_D) [|shared_variable_events|] SKIP
			HUP__(id__,
					    const_AnglePID_S_P,
					    const_AnglePID_S_D) = O__(id__,
					    const_AnglePID_S_P,
					    const_AnglePID_S_D) [|{share__}|] SKIP
			
			-- Shared memory
			-- Shared memory variables
			
			-- sharedVarMemory process
			sharedVarMemory(id__,
					    const_AnglePID_S_P,
					    const_AnglePID_S_D) = terminate -> SKIP
			
			sharedVarSync = {||}
			
			sharedVarHide = {||}
		endmodule
		
			-- undefined operations
			
			-- declaring controller memory
			Memory(id__) = SKIP
			
			D__(id__,
					    const_Segway_P3_AnglePID_C_stm_ref0_P,
					    const_Segway_P3_AnglePID_C_stm_ref0_D) = 	((
					let
						const_AnglePID_S_P = const_Segway_P3_AnglePID_C_stm_ref0_P
						const_AnglePID_S_D = const_Segway_P3_AnglePID_C_stm_ref0_D
					within 
					stm_ref0::D__(id__,
							    const_AnglePID_S_P,
							    const_AnglePID_S_D)[[
						stm_ref0::terminate <- terminate,
						stm_ref0::angleOutputE <- angleOutputE,
						stm_ref0::anewError <- anewError,
						stm_ref0::adiff <- adiff
					]]
				)
					[|
						union(
							{|
							|},
							{|
							|}
						)
					|]
				Memory(id__)
			)
			\ union(
				{|
				|},
				{|
				|}
			)
			[|{|terminate|}|>SKIP
			
			-- VS version
			VS__(id__,
					    const_Segway_P3_AnglePID_C_stm_ref0_P,
					    const_Segway_P3_AnglePID_C_stm_ref0_D) = 	((
					let
						const_AnglePID_S_P = const_Segway_P3_AnglePID_C_stm_ref0_P
						const_AnglePID_S_D = const_Segway_P3_AnglePID_C_stm_ref0_D
					within 
					stm_ref0::VS__(id__,
							    const_AnglePID_S_P,
							    const_AnglePID_S_D)[[
						stm_ref0::terminate <- terminate,
						stm_ref0::angleOutputE <- angleOutputE,
						stm_ref0::anewError <- anewError,
						stm_ref0::adiff <- adiff
					]]
				)
					[|
						union(
							{|
							|},
							{|
							|}
						)
					|]
				Memory(id__)
			)
			\ union(
				{|
				|},
				{|
				|}
			)
			[|{|terminate|}|>SKIP
		
			-- Original version, used for comparison. 
			ORIGINAL(id__,
					    const_Segway_P3_AnglePID_C_stm_ref0_P,
					    const_Segway_P3_AnglePID_C_stm_ref0_D) = sbisim(diamond(	((
					let
						const_AnglePID_S_P = const_Segway_P3_AnglePID_C_stm_ref0_P
						const_AnglePID_S_D = const_Segway_P3_AnglePID_C_stm_ref0_D
					within 
					stm_ref0::O__(id__,
							    const_AnglePID_S_P,
							    const_AnglePID_S_D)[[
						stm_ref0::terminate <- terminate,
						stm_ref0::angleOutputE <- angleOutputE,
						stm_ref0::anewError <- anewError,
						stm_ref0::adiff <- adiff
					]]
				)
					[|
						union(
							{|
							|},
							{|
							|}
						)
					|]
				dbisim(Memory(id__))
			)
			\ union(
				{|
				|},
				{|
				|}
			)
			[|{|terminate|}|>SKIP
			))
							
			-- VS_O version
			VS_O__(id__,
					    const_Segway_P3_AnglePID_C_stm_ref0_P,
					    const_Segway_P3_AnglePID_C_stm_ref0_D) = sbisim(diamond(	((
					let
						const_AnglePID_S_P = const_Segway_P3_AnglePID_C_stm_ref0_P
						const_AnglePID_S_D = const_Segway_P3_AnglePID_C_stm_ref0_D
					within 
					stm_ref0::VS_O__(id__,
							    const_AnglePID_S_P,
							    const_AnglePID_S_D)[[
						stm_ref0::terminate <- terminate,
						stm_ref0::angleOutputE <- angleOutputE,
						stm_ref0::anewError <- anewError,
						stm_ref0::adiff <- adiff
					]]
				)
					[|
						union(
							{|
							|},
							{|
							|}
						)
					|]
				dbisim(Memory(id__))
			)
			\ union(
				{|
				|},
				{|
				|}
			)
			[|{|terminate|}|>SKIP
			))
		
			HEXT(id__,
					    const_Segway_P3_AnglePID_C_stm_ref0_P,
					    const_Segway_P3_AnglePID_C_stm_ref0_D) = O__(id__,
					    const_Segway_P3_AnglePID_C_stm_ref0_P,
					    const_Segway_P3_AnglePID_C_stm_ref0_D) [|shared_variable_events|] SKIP		

			--ANN Specific: --	
			--ANN Channels--
			channel layerRes:{0..layerNo}.{1..maxSize}.Value
			channel nodeOut:{1..layerNo}.{1..maxSize}.{1..maxSize}.Value
		
			
			--SEMANTIC CONSTANTS--
		
			insize = 2
			outsize = 1
			layerstructure = <1, 1> 
			layerNo = #layerstructure 
			maxSize = 2
		
			weights = < < <1,1> >, < <1> > >
			biases = < <0>, <0> >
			
			--Normalisation constants
			offset = 2
			
			--Discretised positive version of core_real
			Value = {0 .. 6}
			
			
			--HELPER FUNCTIONS--
			
			extract_sequence(1, sequence) = head(sequence)
			extract_sequence(index, sequence) = extract_sequence((index-1), tail(sequence))
			layerSize(0) = insize
			layerSize(layer) = extract_sequence(layer, layerstructure)
			
			extract_weights(layer, node, index) = extract_sequence(index, 
													(extract_sequence(node, 
														(extract_sequence(layer, weights)))))
		
			extract_biases(layer, node) = (extract_sequence(node, 
														(extract_sequence(layer, biases))))
			
			--Normalisation Process Definitions --
			
			norm(x) = x + offset
			denorm(x) = x - (2 * offset)
		
			NormInput = anewError.in?currAngle -> adiff.in?currGyroX -> Filter(currAngle, currGyroX)
		
			--Input filter, needed for discretised type handling of core_real.
			Filter(currAngle, currGyroX) = ((currAngle + currGyroX) > 2 or (currAngle + currGyroX) < -2) & layerRes.0.1.(norm(currAngle)) -> layerRes.0.2.(norm(0)) -> SKIP
										[] 
										((currAngle + currGyroX) <= 2 and (currAngle + currGyroX) >= -2) & layerRes.0.1.(norm(currAngle)) -> layerRes.0.2.(norm(currGyroX)) -> SKIP 
		
			DeNormOutput = layerRes.2.1?ann_out -> (denorm(ann_out) >= -2 and denorm(ann_out) <= 2) & angleOutputE.out.denorm(ann_out) -> SKIP 
			
			ANNHiddenEvts = diff(Events, {| layerRes.0, layerRes.2, terminate |})
		
			HiddenLayers = || i : {1..(layerNo-1)} @ [ {| layerRes.(i-1), layerRes.i |} ] HiddenLayer(i, layerSize(i), layerSize(i-1))  
		
			HiddenLayer(layer, size, inputSize) = [| {| layerRes.(layer-1) |} |] i: {1..size} @ Node(layer, i, inputSize) 
		
			Node(layer, node, inputSize) = (||| i:{1..inputSize} @ NodeIn(layer, node, i)) [| {| nodeOut.layer.node |} |] Collator(layer, node, inputSize) \ {| nodeOut |}
		
			NodeIn(layer, node, index) = layerRes.(layer - 1).index?x -> nodeOut.layer.node.index.(x * extract_weights(layer, node, index)) -> SKIP
		
			--relu is the ReLU activation function.
			relu(x) = if (x >= 0) then x else 0
			--needs to check within bounds, sum is not part of a process, needs to be a guard that within bounds, will it always be? 
			--max input, is 4, 2, 6 is highest, 
			Collator(layer, node, index) = 
			let
				C(layer, node, 0, sum) = relu(sum + extract_biases(layer, node)) <= 6 and relu(sum + extract_biases(layer, node)) >= 0 & 
										layerRes.layer.node.relu(sum + extract_biases(layer, node)) -> SKIP
				C(layer, node, index, sum) = nodeOut.layer.node.index?n -> C(layer, node, (index-1), (sum+n))
			within 
				C(layer, node, index, 0)
		
			OutputLayer = [| {| layerRes.(layerNo-1) |} |] i: {1..layerSize(layerNo)} @ Node(layerNo, i, layerSize(layerNo-1))
		
			--This is complete semantic function ANN. We can apply renaming here. 
			ANN = (( (HiddenLayers [| {| layerRes.(layerNo-1) |} |] OutputLayer) \ ANNHiddenEvts ) [|{|terminate|}|>SKIP)  
			
			--This is the process involving the normalisation process, NormInput, and the denormalisation process, DeNormOutput
			Full = ( ( (NormInput [| {| layerRes.0 |} |] ANN) [| {| layerRes.layerNo |} |] DeNormOutput ) \ {| layerRes |} ) ; Full
			
			-- O version (optimised) ANN semantics replaces these.
			O__(id__,
			const_Segway_P3_AnglePID_C_stm_ref0_P,
			const_Segway_P3_AnglePID_C_stm_ref0_D) = Full
		
	endmodule
