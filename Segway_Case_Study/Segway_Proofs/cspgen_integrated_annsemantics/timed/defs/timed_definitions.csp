external prioritise
transparent wbisim

datatype Signal = on | off

-- time definitions
channel tock, tock', finished, dummyevent
OneStep(_) = 0
	
-- immediate termination SKIP
SKIP0 = SKIP
Countdown(t) = if t <= 0 then SKIP0 else tock -> Countdown(t-1)
Deadline(P, t) = (((P ; finished -> SKIP0) [|{tock, finished}|] (Countdown(t) /\ finished->SKIP0)) \ {finished};TSKIP)
IB(P,Q,n,i) = if n == 0 then (P -> IB(P,Q,i,i) [] tock -> IB(P,Q,0,i)) else Q -> IB(P,Q,0,i) [] P -> IB(P,Q,i,i) [] tock -> IB(P,Q,n-1,i)
EDeadline(e, t) = ((e -> SKIP0) [|{e}|] (Countdown(t) /\ e->SKIP0));TSKIP

ETimedOffer(e,t) = if t == 0 then SKIP else (tock -> ETimedOffer(e, t-1) [] e -> ETimedOffer(e, t))
OfferEventsTill(t) = if t == 0 then SKIP else (RUN(diff(Events,{finished,tock})) /\ tock -> OfferEventsTill(t-1))
-- renaming with dummy event prevents CHAOS(Events) in P from interacting with the process
TimedInterrupt(P,t) = wbisim(((P[[finished<-dummyevent]] [| diff(Events,{finished}) |] (OfferEventsTill(t) ; finished -> SKIP)) [| {finished} |> SKIP) \ {finished};TSKIP)

-- Assumes no time needed to reset clock
DoClockReset(CS) = ||| c : CS @ c -> SKIP

-- Time can pass while counting down on a Transition Deadline
-- Note: The reason this process is not simpler is because a deadline
--		 can depend on the value of a variable whose value is only known
--		 once the transition becomes enabled, hence P can be slightly more
--		 complex than just EDeadline(e,t).
Timed(OneStep) {
	TDeadline(e, P) = e -> P ; TDeadline(e,P)
	PDeadline(P, S, Q, d) = (Deadline(P,d) ; SKIP) [|S|] (Q)
	TSKIP = SKIP
	-- Nondeterministic wait
	WAIT_INTERVAL(S) = |~| x : S @ WAIT(x)
}

-- Termination at any time
SKIP_ANYTIME = SKIP |~| tock -> SKIP_ANYTIME
