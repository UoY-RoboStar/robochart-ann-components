module SimplifiedSegwayController
	exports
	channel leftMotorVelocity: InOut.core_real
	channel rightMotorVelocity: InOut.core_real
	channel angle: InOut.core_real
	channel gyroX: InOut.core_real
	channel gyroY: InOut.core_real
	channel gyroZ: InOut.core_real

	channel setLeftMotorSpeedCall: core_real
	channel setRightMotorSpeedCall: core_real
	channel enableInterruptsCall
	channel disableInterruptsCall

	channel adiff:InOut.core_real
	channel anewError:InOut.core_real
	channel angleOutputE:InOut.core_real
	
	--Constants
	const_P = const_AnglePID_P
	const_I = const_SpeedPID_I
	const_D = const_AnglePID_D
	const_maxIntegral = const_SpeedPID_maxIntegral 
	maxAngle = const_BalanceSTM_maxAngle
	
	--Memory channels
	channel set_angle:core_real
	channel get_angle:core_real
	channel set_speed:core_real
	channel get_speed:core_real
	channel set_rotation:core_real
	channel get_rotation:core_real
	channel set_integral:core_real
	channel get_integral:core_real
	channel set_currAngle:core_real
	channel get_currAngle:core_real
	

	--Main Processes of the behaviour:
	init = disableInterruptsCall -> enableInterruptsCall -> SKIP
	
	angleProcess = angle.in?x -> gyroX.in?y -> anewError.out!x -> adiff.out!y -> angleOutputE.in?res -> set_angle!res -> set_currAngle!x -> SKIP
	
	speedProcess = leftMotorVelocity.in?x -> rightMotorVelocity.in?y -> 
   		   get_integral?prevIntegral -> 
		   set_integral.(Plus(prevIntegral, Plus(x,y,core_real), core_real)) -> 
 		   get_integral?currIntegral -> 
		   set_integral.(if currIntegral > const_maxIntegral 
		   			then const_maxIntegral 
		   		else if (currIntegral < - const_maxIntegral) 
		   			then (- const_maxIntegral) else currIntegral) ->
		   get_integral?postIntegral ->
		   set_speed.Plus(Mult(Plus(x, y, core_real), const_P, core_real), (Mult(postIntegral, const_I, core_real)), core_real) ->
		   SKIP
	
	rotationProcess = gyroZ.in?x -> set_rotation.(x * const_D) -> SKIP

	--The final state is the BalanceSTM state machine, to update the motor velocities.
	updateMotors = get_angle?angleX -> get_speed?speedX -> get_rotation?rotationX -> get_currAngle?currAngle -> setLeftMotorSpeedCall.( if(currAngle < - maxAngle or currAngle > maxAngle) then 0 else
														(Minus ( (Plus(angleX,speedX,core_real)), rotationX, core_real )) ) -> 
										setRightMotorSpeedCall.( if(currAngle < - maxAngle or currAngle > maxAngle) then 0 else
														Plus ( (Plus(angleX,speedX,core_real)), rotationX, core_real )) -> SKIP
	
	Memory_Proc = let 
	Memory(angle_var, speed_var, rotation_var, integral_var, currAngle_var) = 
		set_angle?x -> Memory(x, speed_var, rotation_var, integral_var, currAngle_var) []
		get_angle.angle_var -> Memory(angle_var, speed_var, rotation_var, integral_var, currAngle_var) []
		set_speed?x -> Memory(angle_var, x, rotation_var, integral_var, currAngle_var) []
		get_speed.speed_var -> Memory(angle_var, speed_var, rotation_var, integral_var, currAngle_var) []
		set_rotation?x -> Memory(angle_var, speed_var, x, integral_var, currAngle_var) []
		get_rotation.rotation_var -> Memory(angle_var, speed_var, rotation_var, integral_var, currAngle_var) []
		set_integral?x -> Memory(angle_var, speed_var, rotation_var, x, currAngle_var) [] 
		get_integral.integral_var -> Memory(angle_var, speed_var, rotation_var, integral_var, currAngle_var) []
		set_currAngle?x -> Memory(angle_var, speed_var, rotation_var, integral_var, x) []
		get_currAngle.currAngle_var -> Memory(angle_var, speed_var, rotation_var, integral_var, currAngle_var)
		
	within
		Memory(0, 0, 0, 0, 0)
	
	--The events used by our memory process, to be hidden in the final behaviour of this controller.
	Mem_Events = {|set_angle, set_speed, set_rotation, set_integral, set_currAngle, get_angle, get_speed, get_rotation, get_integral, get_currAngle|}
	
	--The events used by the controller, these are the visible events that the user has defined for this controller.
	Controller_Events = {| disableInterruptsCall, enableInterruptsCall, angle, gyroX, gyroY, gyroZ, anewError, adiff, angleOutputE, leftMotorVelocity, rightMotorVelocity, setLeftMotorSpeedCall, 
			setRightMotorSpeedCall |}
	
	--Body is the three PID processes, the main behaviour of hte controller.
	Body = angleProcess ; speedProcess ; rotationProcess 
	
	--Process, this is everything without the memory process. 
	Controller_NoMemory = (init; Body ; updateMotors) ; Controller_NoMemory
	
	--This is the full controller behaviour, in parallel with the memory process and hiding those events.
	Controller = (Controller_NoMemory [| Mem_Events |] Memory_Proc) \ Mem_Events ; Controller
	
	--This is the visible process, used for linking to the rest of the Segway. (Renamed to P to be consistent with the naming style of RoboChart).
	P = Controller 
endmodule
